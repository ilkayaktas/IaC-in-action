---
- name: download | Prepare working directories and variables
  import_tasks: prep_download.yml
  when:
    - not skip_downloads|default(false)
  tags:
    - download
    - upload

- name: Use cri-o for cri connection
  set_fact:
    cri_socket: /var/run/crio/crio.sock
  when: container_manager == 'crio'

- name: Use containerd for cri connetion
  set_fact:
    cri_socket: /var/run/containerd/containerd.sock
  when: container_manager == 'containerd'

- name: Use docker for cri connetion
  set_fact:
    cri_socket: /var/run/dockershim.sock
  when: container_manager == 'docker'

- include_tasks: ../../container-engine/containerd/tasks/crictl.yml
  when:
    - not skip_downloads|default(false)
    - container_manager in ['containerd', 'crio']

- name: download | Get kubeadm binary and list of required images
  include_tasks: prep_kubeadm_images.yml
  when:
    - not skip_downloads|default(false)
    - inventory_hostname in groups['kube-master']
  tags:
    - download
    - upload

- name: download | Download files / images
  include_tasks: "{{ include_file }}"
  with_dict: "{{ downloads | combine(kubeadm_images) }}"
  vars:
    download: "{{ download_defaults | combine(item.value) }}"
    include_file: "download_{% if download.container %}container{% else %}file{% endif %}.yml"
  when:
    - not skip_downloads | default(false)
    - download.enabled
    - item.value.enabled
    - (not (item.value.container | default(false))) or (item.value.container and download_container)
    - (download_run_once and inventory_hostname == download_delegate) or (group_names | intersect(download.groups) | length)

- name: download | Sync files / images from ansible host to nodes
  include_tasks: "{{ include_file }}"
  with_dict: "{{ downloads | combine(kubeadm_images) }}"
  vars:
    download: "{{ download_defaults | combine(item.value) }}"
    include_file: "sync_{% if download.container %}container{% else %}file{% endif %}.yml"
  when:
    - not skip_downloads | default(false)
    - download.enabled
    - item.value.enabled
    - download_run_once
    - group_names | intersect(download.groups) | length
    - not (inventory_hostname == download_delegate)
